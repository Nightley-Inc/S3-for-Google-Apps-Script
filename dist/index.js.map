{"version":3,"sources":["../node_modules/crypto-js/core.js","../node_modules/crypto-js/sha256.js","../node_modules/crypto-js/hmac.js","../node_modules/crypto-js/hmac-sha256.js","S3Request.js","S3.js","index.js"],"names":["SECONDS_PER_DAY","DEFAULT_REGION","S3Request","service","httpMethod","contentType","content","bucket","objectName","listType","prefix","headers","date","Date","prototype","setContentType","getContentType","setContent","setHttpMethod","method","setBucket","fixedEncodeURIComponent","toLowerCase","setObjectName","setListType","setPrefix","addHeader","name","value","getUrl","execute","options","params","payload","muteHttpExceptions","response","UrlFetchApp","fetch","getSignedUrl","request","getRequest","lastExchangeLog","logExchange_","logRequests","Logger","log","getLastExchangeLog","echoRequestToUrl","getResponseCode","error","errorXmlElements","XmlService","parse","getContentText","getRootElement","getChildren","i","getName","charAt","slice","getText","toString","code","message","httpRequestLog","e","authenticate","mode","canonicalRequest","canonicalizedResource","replace","amzAlgorithm","canonicalQueryString","signatureTesting","UTC","dateStr","getUTCFullYear","getUTCMonth","getUTCDate","region","accessKeyId","join","timeStr","timestamp","getUTCHours","getUTCMinutes","getUTCSeconds","expires","hasOwnProperty","amzHeaders","signedHeaders","headerName","match","header","trim","push","sort","canonicalHeaderStr","stringToSign","digest","Utilities","computeDigest","DigestAlgorithm","SHA_256","Charset","UTF_8","bytearrayToHex_","signingKey","getSignatureKey_","secretAccessKey","signature","asBytes","url","byteArr","hexStr","length","b","bStr","unsignBytearray_","key","dateStamp","regionName","serviceName","kDate","kRegion","kService","kSigning","getAuthHeader_","getContentMd5_","base64Encode","MD5","str","encodeURIComponent","c","charCodeAt","getInstance","S3","createBucket","deleteBucket","getObjectNames","responseBlob","getBlob","rootElements","getDataAsString","objectNames","forEach","rootElement","getValue","putObject","object","copyBlob","newBlob","JSON","stringify","setName","getObject","deleteObject","logContent","formatString","getHeaders"],"mappings":";;AAuvBA,IAAA,GAvvBA,SAAA,EAAA,GACA,iBAAA,QAEA,OAAA,QAAA,QAAA,IAEA,mBAAA,GAAA,EAAA,IAEA,EAAA,GAAA,GAIA,EAAA,SAAA,IAXA,CAaA,KAAA,WAKA,IAAA,EAAA,GAAA,SAAA,EAAA,GAIA,IAAA,EAAA,OAAA,QAAA,WACA,SAAA,KAEA,OAAA,SAAA,GACA,IAAA,EAQA,OANA,EAAA,UAAA,EAEA,EAAA,IAAA,EAEA,EAAA,UAAA,KAEA,GAZA,GAmBA,EAAA,GAKA,EAAA,EAAA,IAAA,GAKA,EAAA,EAAA,KAGA,CAmBA,OAAA,SAAA,GAEA,IAAA,EAAA,EAAA,MAoBA,OAjBA,GACA,EAAA,MAAA,GAIA,EAAA,eAAA,SAAA,KAAA,OAAA,EAAA,OACA,EAAA,KAAA,WACA,EAAA,OAAA,KAAA,MAAA,KAAA,aAKA,EAAA,KAAA,UAAA,EAGA,EAAA,OAAA,KAEA,GAeA,OAAA,WACA,IAAA,EAAA,KAAA,SAGA,OAFA,EAAA,KAAA,MAAA,EAAA,WAEA,GAeA,KAAA,aAcA,MAAA,SAAA,GACA,IAAA,IAAA,KAAA,EACA,EAAA,eAAA,KACA,KAAA,GAAA,EAAA,IAKA,EAAA,eAAA,cACA,KAAA,SAAA,EAAA,WAaA,MAAA,WACA,OAAA,KAAA,KAAA,UAAA,OAAA,QAWA,EAAA,EAAA,UAAA,EAAA,OAAA,CAaA,KAAA,SAAA,EAAA,GACA,EAAA,KAAA,MAAA,GAAA,GAGA,KAAA,SAhLA,MA+KA,EACA,EAEA,EAAA,EAAA,QAiBA,SAAA,SAAA,GACA,OAAA,GAAA,GAAA,UAAA,OAcA,OAAA,SAAA,GAEA,IAAA,EAAA,KAAA,MACA,EAAA,EAAA,MACA,EAAA,KAAA,SACA,EAAA,EAAA,SAMA,GAHA,KAAA,QAGA,EAAA,EAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,IAAA,EAAA,EAAA,IAAA,KAAA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,IAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAIA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAMA,OAHA,KAAA,UAAA,EAGA,MAUA,MAAA,WAEA,IAAA,EAAA,KAAA,MACA,EAAA,KAAA,SAGA,EAAA,IAAA,IAAA,YAAA,GAAA,EAAA,EAAA,EACA,EAAA,OAAA,EAAA,KAAA,EAAA,IAYA,MAAA,WACA,IAAA,EAAA,EAAA,MAAA,KAAA,MAGA,OAFA,EAAA,MAAA,KAAA,MAAA,MAAA,GAEA,GAgBA,OAAA,SAAA,GAkBA,IAjBA,IAiBA,EAjBA,EAAA,GAEA,EAAA,SAAA,GACA,EAAA,EAAA,IACA,EAAA,UACA,EAAA,WAEA,OAAA,WAGA,IAAA,IAFA,EAAA,OAAA,MAAA,IAAA,GAAA,IAAA,IAEA,KADA,EAAA,MAAA,MAAA,IAAA,GAAA,IAAA,GACA,EAGA,OAFA,GAAA,YACA,GAAA,KACA,EAAA,SAAA,GAAA,GAAA,KAIA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,YAAA,GAAA,EAAA,WAEA,EAAA,UAAA,IACA,EAAA,KAAA,WAAA,IAAA,GAGA,OAAA,IAAA,EAAA,KAAA,EAAA,MAOA,EAAA,EAAA,IAAA,GAKA,EAAA,EAAA,IAAA,CAcA,UAAA,SAAA,GAOA,IALA,IAAA,EAAA,EAAA,MACA,EAAA,EAAA,SAGA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,IAAA,EAAA,EAAA,IAAA,KAAA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,MAAA,IAAA,GAAA,SAAA,KACA,EAAA,MAAA,GAAA,GAAA,SAAA,KAGA,OAAA,EAAA,KAAA,KAgBA,MAAA,SAAA,GAMA,IAJA,IAAA,EAAA,EAAA,OAGA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,IAAA,SAAA,EAAA,OAAA,EAAA,GAAA,KAAA,GAAA,EAAA,EAAA,EAGA,OAAA,IAAA,EAAA,KAAA,EAAA,EAAA,KAOA,EAAA,EAAA,OAAA,CAcA,UAAA,SAAA,GAOA,IALA,IAAA,EAAA,EAAA,MACA,EAAA,EAAA,SAGA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,IAAA,EAAA,EAAA,IAAA,KAAA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,KAAA,OAAA,aAAA,IAGA,OAAA,EAAA,KAAA,KAgBA,MAAA,SAAA,GAMA,IAJA,IAAA,EAAA,EAAA,OAGA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,KAAA,IAAA,EAAA,WAAA,KAAA,GAAA,EAAA,EAAA,EAGA,OAAA,IAAA,EAAA,KAAA,EAAA,KAOA,EAAA,EAAA,KAAA,CAcA,UAAA,SAAA,GACA,IACA,OAAA,mBAAA,OAAA,EAAA,UAAA,KACA,MAAA,GACA,MAAA,IAAA,MAAA,0BAiBA,MAAA,SAAA,GACA,OAAA,EAAA,MAAA,SAAA,mBAAA,OAWA,EAAA,EAAA,uBAAA,EAAA,OAAA,CAQA,MAAA,WAEA,KAAA,MAAA,IAAA,EAAA,KACA,KAAA,YAAA,GAaA,QAAA,SAAA,GAEA,iBAAA,IACA,EAAA,EAAA,MAAA,IAIA,KAAA,MAAA,OAAA,GACA,KAAA,aAAA,EAAA,UAiBA,SAAA,SAAA,GAEA,IAAA,EAAA,KAAA,MACA,EAAA,EAAA,MACA,EAAA,EAAA,SACA,EAAA,KAAA,UAIA,EAAA,GAHA,EAAA,GAcA,GARA,EAFA,EAEA,EAAA,KAAA,GAIA,EAAA,KAAA,EAAA,GAAA,KAAA,eAAA,IAIA,EAGA,EAAA,EAAA,IAAA,EAAA,EAAA,GAGA,GAAA,EAAA,CACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAEA,KAAA,gBAAA,EAAA,GAIA,IAAA,EAAA,EAAA,OAAA,EAAA,GACA,EAAA,UAAA,EAIA,OAAA,IAAA,EAAA,KAAA,EAAA,IAYA,MAAA,WACA,IAAA,EAAA,EAAA,MAAA,KAAA,MAGA,OAFA,EAAA,MAAA,KAAA,MAAA,QAEA,GAGA,eAAA,IA2IA,GAnIA,EAAA,OAAA,EAAA,OAAA,CAIA,IAAA,EAAA,SAWA,KAAA,SAAA,GAEA,KAAA,IAAA,KAAA,IAAA,OAAA,GAGA,KAAA,SAUA,MAAA,WAEA,EAAA,MAAA,KAAA,MAGA,KAAA,YAeA,OAAA,SAAA,GAQA,OANA,KAAA,QAAA,GAGA,KAAA,WAGA,MAiBA,SAAA,SAAA,GASA,OAPA,GACA,KAAA,QAAA,GAIA,KAAA,eAKA,UAAA,GAeA,cAAA,SAAA,GACA,OAAA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,KAAA,GAAA,SAAA,KAiBA,kBAAA,SAAA,GACA,OAAA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,KAAA,KAAA,EAAA,GAAA,SAAA,OAQA,EAAA,KAAA,IAEA,OAAA,EA/tBA,CAguBA,MAGA,OAAA;;;AC/iBA,IAAA,GAtMA,SAAA,EAAA,GACA,iBAAA,QAEA,OAAA,QAAA,QAAA,EAAA,QAAA,WAEA,mBAAA,GAAA,EAAA,IAEA,EAAA,CAAA,UAAA,GAIA,EAAA,EAAA,UAXA,CAaA,KAAA,SAAA,GAuLA,OArLA,SAAA,GAEA,IAAA,EAAA,EACA,EAAA,EAAA,IACA,EAAA,EAAA,UACA,EAAA,EAAA,OACA,EAAA,EAAA,KAGA,EAAA,GACA,EAAA,IAGA,WACA,SAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,KAAA,GACA,EAAA,EAAA,GAAA,EAAA,IACA,KAAA,EAAA,GACA,OAAA,EAIA,OAAA,EAGA,SAAA,EAAA,GACA,OAAA,YAAA,GAAA,EAAA,IAAA,EAKA,IAFA,IAAA,EAAA,EACA,EAAA,EACA,EAAA,IACA,EAAA,KACA,EAAA,IACA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,MAEA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAEA,KAGA,IA5BA,GAiCA,IAAA,EAAA,GAKA,EAAA,EAAA,OAAA,EAAA,OAAA,CACA,SAAA,WACA,KAAA,MAAA,IAAA,EAAA,KAAA,EAAA,MAAA,KAGA,gBAAA,SAAA,EAAA,GAeA,IAbA,IAAA,EAAA,KAAA,MAAA,MAGA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GAGA,EAAA,EAAA,EAAA,GAAA,IAAA,CACA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,EAAA,OACA,CACA,IAAA,EAAA,EAAA,EAAA,IACA,GAAA,GAAA,GAAA,IAAA,IACA,GAAA,GAAA,IAAA,IACA,IAAA,EAEA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,IAAA,KACA,GAAA,GAAA,IAAA,IACA,IAAA,GAEA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAGA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAEA,GAAA,GAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IAAA,KAAA,GAAA,GAAA,IAAA,IAGA,EAAA,IAFA,GAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IAAA,KAAA,GAAA,EAAA,IAAA,MAJA,EAAA,GAAA,EAAA,GAMA,EAAA,GAAA,EAAA,GAGA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GATA,EAAA,GASA,EAIA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAGA,YAAA,WAEA,IAAA,EAAA,KAAA,MACA,EAAA,EAAA,MAEA,EAAA,EAAA,KAAA,YACA,EAAA,EAAA,EAAA,SAYA,OATA,EAAA,IAAA,IAAA,KAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,MAAA,EAAA,YACA,EAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EACA,EAAA,SAAA,EAAA,EAAA,OAGA,KAAA,WAGA,KAAA,OAGA,MAAA,WACA,IAAA,EAAA,EAAA,MAAA,KAAA,MAGA,OAFA,EAAA,MAAA,KAAA,MAAA,QAEA,KAkBA,EAAA,OAAA,EAAA,cAAA,GAgBA,EAAA,WAAA,EAAA,kBAAA,GAjLA,CAkLA,MAGA,EAAA;;;ACtDA,IAAA,GA9IA,SAAA,EAAA,GACA,iBAAA,QAEA,OAAA,QAAA,QAAA,EAAA,QAAA,WAEA,mBAAA,GAAA,EAAA,IAEA,EAAA,CAAA,UAAA,GAIA,EAAA,EAAA,UAXA,CAaA,KAAA,SAAA,GAEA,IAEA,EAEA,EAEA,EAFA,GAFA,EAAA,GACA,IACA,KAEA,EADA,EAAA,IACA,KACA,EAAA,KAKA,KAAA,EAAA,OAAA,CAWA,KAAA,SAAA,EAAA,GAEA,EAAA,KAAA,QAAA,IAAA,EAAA,KAGA,iBAAA,IACA,EAAA,EAAA,MAAA,IAIA,IAAA,EAAA,EAAA,UACA,EAAA,EAAA,EAGA,EAAA,SAAA,IACA,EAAA,EAAA,SAAA,IAIA,EAAA,QAWA,IARA,IAAA,EAAA,KAAA,MAAA,EAAA,QACA,EAAA,KAAA,MAAA,EAAA,QAGA,EAAA,EAAA,MACA,EAAA,EAAA,MAGA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,WACA,EAAA,IAAA,UAEA,EAAA,SAAA,EAAA,SAAA,EAGA,KAAA,SAUA,MAAA,WAEA,IAAA,EAAA,KAAA,QAGA,EAAA,QACA,EAAA,OAAA,KAAA,QAeA,OAAA,SAAA,GAIA,OAHA,KAAA,QAAA,OAAA,GAGA,MAiBA,SAAA,SAAA,GAEA,IAAA,EAAA,KAAA,QAGA,EAAA,EAAA,SAAA,GAIA,OAHA,EAAA,QACA,EAAA,SAAA,KAAA,MAAA,QAAA,OAAA;;;ACrHA,IAAA,GAjBA,SAAA,EAAA,EAAA,GACA,iBAAA,QAEA,OAAA,QAAA,QAAA,EAAA,QAAA,UAAA,QAAA,YAAA,QAAA,WAEA,mBAAA,GAAA,EAAA,IAEA,EAAA,CAAA,SAAA,WAAA,UAAA,GAIA,EAAA,EAAA,UAXA,CAaA,KAAA,SAAA,GAEA,OAAA,EAAA;;ACodA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAneA,IAAA,EAAA,EAAA,QAAA,0BAmeA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAheA,IAAIA,EAAkB,MAClBC,EAAiB,iBAOd,SAASC,EAAUC,GACnBA,KAAAA,QAAUA,EAEVC,KAAAA,WAAa,MACbC,KAAAA,YAAc,GACdC,KAAAA,QAAU,GACVC,KAAAA,OAAS,GACTC,KAAAA,WAAa,GACbC,KAAAA,SAAW,GACXC,KAAAA,OAAS,GACTC,KAAAA,QAAU,GAEVC,KAAAA,KAAO,IAAIC,KAQlBX,EAAUY,UAAUC,eAAiB,SAAUV,GACzC,GAAuB,iBAAhBA,EACD,KAAA,yCAGH,OADFA,KAAAA,YAAcA,EACZ,MAGTH,EAAUY,UAAUE,eAAiB,WAC/B,OAAA,KAAKX,YAMA,KAAKA,YAGY,QAApB,KAAKD,YAA4C,SAApB,KAAKA,WAE7B,oCAGJ,IASTF,EAAUY,UAAUG,WAAa,SAASX,GACpC,GAAmB,iBAAZA,EACD,KAAA,qCAGH,OADFA,KAAAA,QAAUA,EACR,MAQTJ,EAAUY,UAAUI,cAAgB,SAASC,GACvC,GAAkB,iBAAXA,EAAqB,KAAM,6BAE/B,OADFf,KAAAA,WAAae,EACX,MAQTjB,EAAUY,UAAUM,UAAY,SAASb,GACnC,GAAkB,iBAAXA,EAAqB,KAAM,6BAE/B,OADFA,KAAAA,OAAS,KAAKc,wBAAwBd,EAAOe,eAC3C,MAOTpB,EAAUY,UAAUS,cAAgB,SAASf,GACvC,GAAsB,iBAAfA,EAAyB,KAAM,4BAEnC,OADFA,KAAAA,WAAa,KAAKa,wBAAwBb,EAAWc,eACnD,MAGTpB,EAAUY,UAAUU,YAAc,SAASf,GACrC,GAAoB,iBAAbA,EAAuB,KAAM,0BAEjC,OADFA,KAAAA,SAAW,KAAKY,wBAAwBZ,EAASa,eAC/C,MAGTpB,EAAUY,UAAUW,UAAY,SAASf,GACnC,GAAkB,iBAAXA,EAAqB,KAAM,wBAE/B,OADFA,KAAAA,OAAS,KAAKW,wBAAwBX,EAAOY,eAC3C,MAWTpB,EAAUY,UAAUY,UAAY,SAASC,EAAMC,GACzC,GAAiB,iBAAVD,EAAoB,KAAM,6BACjC,GAAiB,iBAAVC,EAAoB,KAAM,8BAE9B,OADFjB,KAAAA,QAAQgB,GAAQC,EACd,MAMT1B,EAAUY,UAAUe,OAAS,WACtB,MAAiB,IAAjB,KAAKpB,SACD,WAAa,KAAKF,OAAS,qBAE3B,WAAa,KAAKA,OAAS,qBAAuB,KAAKC,YAclEN,EAAUY,UAAUgB,QAAU,SAASC,GACrCA,EAAUA,GAAW,GAIjBC,IAAAA,EAAS,CACXb,OAAQ,KAAKf,WACb6B,QAAS,KAAK3B,QACdK,QAAS,KAAKA,QACduB,oBAAoB,GAIlB,KAAKlB,mBACPgB,EAAO3B,YAAc,KAAKW,kBAIxBmB,IAAAA,EAAWC,YAAYC,MAAM,KAAKC,aAAa,IAAKN,GAKpDO,EAAUH,YAAYI,WAAW,KAAKF,aAAa,IAAKN,GAexDG,GAXCM,KAAAA,gBAAkB,KAAKtC,QAAQuC,aAAaH,EAASJ,GACtDJ,EAAQY,aACVC,OAAOC,IAAI,KAAK1C,QAAQ2C,sBAItBf,EAAQgB,kBACVX,YAAYC,MAAMN,EAAQgB,iBAAkBf,GAI1CG,EAASa,kBAAoB,IAAK,CAEhCC,IAAAA,EAAQ,CACZA,KAAa,YACT,IACEC,IAAAA,EAAmBC,WAAWC,MAAMjB,EAASkB,kBAAkBC,iBAAiBC,cAE/EC,IAAAA,KAAKN,EAAkB,CACtBvB,IAAAA,EAAOuB,EAAiBM,GAAGC,UAE/BR,EADAtB,EAAOA,EAAK+B,OAAO,GAAGpC,cAAgBK,EAAKgC,MAAM,IACnCT,EAAiBM,GAAGI,UAIpCX,EAAMY,SAAW,WAAoB,MAAA,eAAiB,KAAKC,KAAO,KAAO,KAAKC,QAAU,iBAAmBxB,EAAU,kBAAoBJ,GAEzIc,EAAMe,eAAiB,KAAK7D,QAAQ2C,qBACpC,MAAOmB,GAGPhB,EAAMc,QAAU,0BAA4B5B,EAASa,kBAAoB,2CAEzEC,EAAMY,SAAW,WAAqB,OAAA,KAAKE,SAE3Cd,EAAMe,eAAiB,KAAK7D,QAAQ2C,qBAGhCG,MAAAA,EAGDd,OAAAA,GASTjC,EAAUY,UAAUwB,aAAe,SAASP,GAGrCA,GAFLA,EAAO,QAAcA,EAAO,SAAe/B,EAEtC+B,EAAO,QAAc,GAAKA,EAAO,QAAc,EAAI/B,EAChD,MAAA,GAAI,2EAGL,OAAA,KAAKkE,aAAanC,EAAS,QAapC7B,EAAUY,UAAUoD,aAAe,SAASnC,EAASoC,GACnDpC,EAAUA,GAAW,GAWjBqC,IAAAA,EAAmB,GAMnB,GAHJA,GAAoB,KAAKhE,WAAa,KAGjB,IAAjB,KAAKK,SACH4D,IAAAA,EAAwB,SAExBA,EAAwB,IAAM,KAAK7D,WAGzC4D,IADAC,EAAwBA,EAAsBC,QAAQ,OAAQ,MAClB,KAKxCC,IAEAC,EAAuB,mCAGvB5D,EAAO,IAAIC,KACX,qBAAsBkB,IAAwC,IAA7BA,EAAQ0C,mBACzC7D,EAAO,IAAIC,KAAKA,KAAK6D,IAAI,OAAQ,KAAM,QAEvCC,IAAAA,EAAU/D,EAAKgE,kBAAoB,KAAOhE,EAAKiE,cAAc,IAAKlB,OAAO,IAAM,IAAM/C,EAAKkE,cAAcnB,OAAO,GAE/GoB,EAAShD,EAAQgD,QAAU9E,EAI/BuE,GAAwB,qBAFC,CAAC,KAAKrE,QAAQ6E,YAAaL,EAASI,EAAQ,KAAM,gBAETE,KAAK,OAGnEC,IACAC,EAAYR,EAAU,MADX,IAAM/D,EAAKwE,eAAezB,OAAO,IAAM,IAAM/C,EAAKyE,iBAAiB1B,OAAO,IAAM,IAAM/C,EAAK0E,iBAAiB3B,OAAO,IACxF,IAC1Ca,GAAwB,eAAiBW,EAIrCI,IAAAA,EAAU,MACVxD,EAAQyD,eAAe,aACzBD,EAAUxD,EAAQwD,SAEpBf,GAAwB,kBAAoBe,EAIxCE,IAAAA,EAAa,CAAC,QAAU,KAAKlF,OAAS,qBACtCmF,EAAgB,CAAC,QAEhB,IAAA,IAAIC,KAAc,KAAKhF,QAKtBgF,GAAAA,EAAWC,MAAM,WAAY,CAC3BC,IAAAA,EAASF,EAAWrE,cAAgB,IAAM,KAAKX,QAAQgF,GAAYG,OACvEL,EAAWM,KAAKF,GAChBH,EAAcK,KAAKJ,EAAWrE,eAI7BX,KAAAA,QAAU8E,EAAWO,OACtBC,IAAAA,EAAqBR,EAAWO,OAAOf,KAAK,MAAQ,KAExDT,GAAwB,wBAA0BkB,EAAcM,OAAOf,KAAK,OAGvD,IAAjB,KAAKxE,WACP+D,GAAwB,cAAgB,KAAK/D,SAC1B,IAAf,KAAKC,SACP8D,GAAwB,WAAa,KAAK9D,SAM9C0D,GAAoBI,EAAuB,KAG3CJ,GAAoB6B,EAAqB,KAGzC7B,GAAoBsB,EAAcM,OAAOf,KAAK,OAAS,KAIvDb,GAAoB,mBAGhB8B,IAAAA,EAAe,GAGnBA,GAAgB3B,qBAGhB2B,GAAgBf,EAAY,KAG5Be,GAAgBvB,EAAU,IAAMI,EAAS,qBAGrCoB,IAAAA,EAASC,UAAUC,cAAcD,UAAUE,gBAAgBC,QAASnC,EAAkBgC,UAAUI,QAAQC,OAG5GP,GAFgB,KAAKQ,gBAAgBP,GAejCQ,IAAAA,EAAa,KAAKC,iBAAiB,KAAKzG,QAAQ0G,gBAAiBlC,EAASI,EAAQ,MAIlF+B,GAAY,EAAWZ,EAAAA,SAAAA,EAAcS,EAAY,CAAEI,SAAS,IAE5D5C,GAAS,cAATA,EACK2C,OAAAA,EAELE,IAAAA,EAAM,KAAKnF,SAAW,IAAM2C,EAAuB,oBAAsBsC,EAItEE,OAFPA,EAAMA,EAAI1C,QAAQ,KAAM,QAa1BpE,EAAUY,UAAU4F,gBAAkB,SAASO,GAExC,IADDC,IAAAA,EAAS,GACJ1D,EAAE,EAAGA,EAAEyD,EAAQE,OAAQ3D,IAAK,CAC/B4D,IAAAA,EAAIH,EAAQzD,GACZ4D,EAAI,IACNA,GAAK,KAEHC,IAAAA,EAAOD,EAAEvD,SAAS,IACF,IAAhBwD,EAAKF,SACPE,EAAO,IAAMA,GAEfH,GAAUG,EAELH,OAAAA,GAUThH,EAAUY,UAAUwG,iBAAmB,SAASL,GACzC,IAAA,IAAIzD,EAAE,EAAGA,EAAEyD,EAAQE,OAAQ3D,IAC1ByD,EAAQzD,GAAK,IACfyD,EAAQzD,IAAM,KAGXyD,OAAAA,GAcT/G,EAAUY,UAAU8F,iBAAmB,SAASW,EAAKC,EAAWC,EAAYC,GACrEC,IAAAA,GAAW,EAAWH,EAAAA,SAAAA,EAAW,OAASD,EAAK,CAAER,SAAS,IAC1Da,GAAW,EAAWH,EAAAA,SAAAA,EAAYE,EAAO,CAAEZ,SAAS,IACpDc,GAAW,EAAWH,EAAAA,SAAAA,EAAaE,EAAS,CAAEb,SAAS,IAGpDe,OAFQ,EAAW,EAAA,SAAA,eAAgBD,EAAU,CAAEd,SAAS,KAWlE7G,EAAUY,UAAUiH,eAAiB,WAE/BjB,IAAAA,EAAY,KAAK5C,aAAa,GAAI,aAE/B,MAAA,OAAS,KAAK/D,QAAQ6E,YAAc,IAAM8B,GASnD5G,EAAUY,UAAUkH,eAAiB,WAC/B,OAAA,KAAK1H,QAAQ6G,OAAS,EACjBf,UAAU6B,aAAa7B,UAAUC,cAAcD,UAAUE,gBAAgB4B,IAAK,KAAK5H,QAAS8F,UAAUI,QAAQC,QAE9G,IAIXvG,EAAUY,UAAUO,wBAA0B,SAAS8G,GAC9CC,OAAAA,mBAAmBD,GAAK7D,QAAQ,WAAY,SAAS+D,GACnD,MAAA,IAAMA,EAAEC,WAAW,GAAGzE,SAAS;;ACjN1C,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAA,QAAA,GAAA,EApRA,IAAA,EAAA,QAAA,eA6CO,SAAS0E,EAAYvD,EAAa6B,EAAiB9E,GACjD,OAAA,IAAIyG,EAAGxD,EAAa6B,EAAiB9E,GAUvC,SAASyG,EAAGxD,EAAa6B,EAAiB9E,GAC3C,GAAuB,iBAAhBiD,EAA0B,KAAM,0CACvC,GAA2B,iBAApB6B,EAA8B,KAAM,6CAE1C7B,KAAAA,YAAcA,EACd6B,KAAAA,gBAAkBA,EAClB9E,KAAAA,QAAUA,EAAU,GAU3ByG,EAAG1H,UAAU2H,aAAe,SAAUlI,EAAQwB,GAC5CA,EAAUA,GAAW,GAEjBQ,IAAAA,EAAU,IAAIrC,EAAJ,UAAc,MAC5BqC,EAAQrB,cAAc,OAKtBqB,EAAQxB,eAAe,mBAGa,IAAzBgB,EAAQ,eACjBA,EAAQ,aAAe,WAEzBQ,EAAQb,UAAU,YAAaK,EAAQ,cAEvCQ,EAAQnB,UAAUb,GAElBgC,EAAQT,QAAQC,IAWlByG,EAAG1H,UAAU4H,aAAe,SAAUnI,EAAQwB,GAC5CA,EAAUA,GAAW,GAEjBQ,IAAAA,EAAU,IAAIrC,EAAJ,UAAc,MAC5BqC,EAAQrB,cAAc,UAEtBqB,EAAQnB,UAAUb,GAClBgC,EAAQT,QAAQC,IAOlByG,EAAG1H,UAAU6H,eAAiB,SAAUpI,EAAQG,EAAQqB,GACtDA,EAAUA,GAAW,GAEjBQ,IAAAA,EAAU,IAAIrC,EAAJ,UAAc,MAC5BqC,EAAQrB,cAAc,OACtBqB,EAAQnB,UAAUb,GAClBgC,EAAQf,YAAY,KACpBe,EAAQd,UAAUf,GAEd,IACEkI,IAAAA,EAAerG,EAAQT,QAAQC,GAAS8G,UAC5C,MAAO5E,GACHA,GAAW,aAAXA,EAAEtC,MAAkC,cAAXsC,EAAEH,KACtB,OAAA,KAGDG,MAAAA,EAIN2E,GAAkC,oBAAlCA,EAAa5H,iBAAwC,CACnD8H,IAAAA,EAAe3F,WAAWC,MAAMwF,EAAaG,mBAAmBzF,iBAAiBC,cACjFyF,EAAc,GAYXA,OAVPF,EAAaG,QAAQ,SAASC,GACE,aAA1BA,EAAYzF,WACdyF,EAAY3F,cAAc0F,QAAQ,SAAS3I,GACf,QAAtBA,EAAQmD,WACVuF,EAAYjD,KAAKzF,EAAQ6I,gBAM1BH,EAEFJ,OAAAA,GAYTJ,EAAG1H,UAAUsI,UAAY,SAAU7I,EAAQC,EAAY6I,EAAQtH,GAC7DA,EAAUA,GAAW,GAEjBQ,IAAAA,EAAU,IAAIrC,EAAJ,UAAc,MAC5BqC,EAAQrB,cAAc,OACtBqB,EAAQnB,UAAUb,GAClBgC,EAAQhB,cAAcf,KAGc,mBAA3B6I,EAAOC,UACoB,mBAA3BD,EAAON,iBACoB,mBAA3BM,EAAOrI,kBAKdqI,EAASjD,UAAUmD,QAAQC,KAAKC,UAAUJ,GAAS,qBAC5CK,QAAQlJ,GAGjB+B,EAAQtB,WAAWoI,EAAON,mBAC1BxG,EAAQxB,eAAesI,EAAOrI,kBAE9BuB,EAAQT,QAAQC,IAWlByG,EAAG1H,UAAU6I,UAAY,SAAUpJ,EAAQC,EAAYuB,GACrDA,EAAUA,GAAW,GAEjBQ,IAAAA,EAAU,IAAIrC,EAAJ,UAAc,MAC5BqC,EAAQrB,cAAc,OAEtBqB,EAAQnB,UAAUb,GAClBgC,EAAQhB,cAAcf,GAClB,IACEoI,IAAAA,EAAerG,EAAQT,QAAQC,GAAS8G,UAC5C,MAAO5E,GACHA,GAAW,aAAXA,EAAEtC,MAAkC,cAAXsC,EAAEH,KACtB,OAAA,KAGDG,MAAAA,EAKN2E,MAAkC,qBAAlCA,EAAa5H,iBACPwI,KAAKpG,MAAMwF,EAAaG,mBAE3BH,GAWTJ,EAAG1H,UAAU8I,aAAe,SAAUrJ,EAAQC,EAAYuB,GACxDA,EAAUA,GAAW,GAEjBQ,IAAAA,EAAU,IAAIrC,EAAJ,UAAc,MAC5BqC,EAAQrB,cAAc,UAEtBqB,EAAQnB,UAAUb,GAClBgC,EAAQhB,cAAcf,GAEtB+B,EAAQT,QAAQC,IAWlByG,EAAG1H,UAAUwB,aAAe,SAAS/B,EAAQC,EAAYuB,GACvDA,EAAUA,GAAW,GAEjBQ,IAAAA,EAAU,IAAIrC,EAAJ,UAAc,MAOrBqC,OANPA,EAAQrB,cAAc,OAEtBqB,EAAQnB,UAAUb,GAClBgC,EAAQhB,cAAcf,GAGf+B,EAAQD,aAAaP,IAI9ByG,EAAG1H,UAAUgC,mBAAqB,WACzB,OAAA,KAAKL,iBASd+F,EAAG1H,UAAU4B,aAAe,SAASH,EAASJ,GACxC0H,IAAAA,EAAa,GAEZrG,IAAAA,KADLqG,GAAc,oBACJtH,EACkB,iBAAfA,EAAQiB,IAAmBjB,EAAQiB,GAAG2D,OAAS,MAExD5E,EAAQiB,GAAKjB,EAAQiB,GAAGG,MAAM,EAAG,KAAQ,oBAE3CkG,GAAczD,UAAU0D,aAAa,aAActG,EAAGjB,EAAQiB,IAGhEqG,GAAc,mBACdA,GAAc,qBAAuB1H,EAASa,kBAAoB,KAClE6G,GAAc,aAEVlJ,IAAAA,EAAUwB,EAAS4H,aAClBvG,IAAAA,KAAK7C,EACRkJ,GAAczD,UAAU0D,aAAa,aAActG,EAAG7C,EAAQ6C,IAEhEqG,GAAc,UAAY1H,EAASkB,iBAC9BZ,KAAAA,gBAAkBoH;;ACxSzB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,IAAA,EAAA,QAAA","file":"index.js","sourceRoot":"../src","sourcesContent":[";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.HmacSHA256;\n\n}));","import HmacSHA256 from \"crypto-js/hmac-sha256\"\n\n//constants\nvar SECONDS_PER_DAY = 86400;\nvar DEFAULT_REGION = 'ap-northeast-1';\n\n/* constructs an S3Request to an S3 service\n *\n * @constructor\n * @param {S3} service S3 service to which this request will be sent\n */\nexport function S3Request(service) {\n  this.service = service;\n\n  this.httpMethod = 'GET';\n  this.contentType = '';\n  this.content = ''; //content of the HTTP request\n  this.bucket = ''; //gets turned into host (bucketName.s3.amazonaws.com)\n  this.objectName = '';\n  this.listType = '';\n  this.prefix = '';\n  this.headers = {};\n\n  this.date = new Date();\n}\n\n/* sets contenetType of the request\n * @param {string} contentType mime-type, based on RFC, indicated how content is encoded\n * @throws {string} message if invalid input\n * @return {S3Request} this request, for chaining\n */\nS3Request.prototype.setContentType = function (contentType) {\n  if (typeof contentType !== 'string') {\n      throw 'contentType must be passed as a string';\n  }\n  this.contentType = contentType;\n  return this;\n};\n\nS3Request.prototype.getContentType = function () {\n  if (this.contentType) {\n    //Browser.msgBox(\n    //  'WARNING',\n    //  'contentType is empty.',\n    //  Browser.Buttons.OK\n    //);\n    return this.contentType;\n  } else {\n    //if no contentType has been explicitly set, default based on HTTP methods\n    if (this.httpMethod === 'PUT' || this.httpMethod === 'POST') {\n      //UrlFetchApp defaults to this for these HTTP methods\n      return 'application/x-www-form-urlencoded';\n    }\n  }\n  return '';\n};\n\n\n/* sets content of request\n * @param {string} content request content encoded as a string\n * @throws {string} message if invalid input\n * @return {S3Request} this request, for chaining\n */\nS3Request.prototype.setContent = function(content) {\n  if (typeof content !== 'string') {\n      throw 'content must be passed as a string';\n  }\n  this.content = content;\n  return this;\n};\n\n/* sets Http method for request\n * @param {string} method http method for request\n * @throws {string} message if invalid input\n * @return {S3Request} this request, for chaining\n */\nS3Request.prototype.setHttpMethod = function(method) {\n  if (typeof method !== 'string') throw 'http method must be string';\n  this.httpMethod = method;\n  return this;\n};\n\n/* sets bucket name for the request\n * @param {string} bucket name of bucket on which request operates\n * @throws {string} message if invalid input\n * @return {S3Request} this request, for chaining\n */\nS3Request.prototype.setBucket = function(bucket) {\n  if (typeof bucket !== 'string') throw 'bucket name must be string';\n  this.bucket = this.fixedEncodeURIComponent(bucket.toLowerCase());\n  return this;\n};\n/* sets objectName (key) for request\n * @param {string} objectName name that uniquely identifies object within bucket\n * @throws {string} message if invalid input\n * @return {S3Request} this request, for chaining\n */\nS3Request.prototype.setObjectName = function(objectName) {\n  if (typeof objectName !== 'string') throw 'objectName must be string';\n  this.objectName = this.fixedEncodeURIComponent(objectName.toLowerCase());\n  return this;\n};\n\nS3Request.prototype.setListType = function(listType) {\n  if (typeof listType !== 'string') throw 'listType must be string';\n  this.listType = this.fixedEncodeURIComponent(listType.toLowerCase());\n  return this;\n};\n\nS3Request.prototype.setPrefix = function(prefix) {\n  if (typeof prefix !== 'string') throw 'prefix must be string';\n  this.prefix = this.fixedEncodeURIComponent(prefix.toLowerCase());\n  return this;\n};\n\n\n/* adds HTTP header to S3 request (see AWS S3 REST api documentation for possible values)\n *\n * @param {string} name Header name\n * @param {string} value Header value\n * @throws {string} message if invalid input\n * @return {S3Request} this object, for chaining\n */\nS3Request.prototype.addHeader = function(name, value) {\n  if (typeof name  !== 'string') throw 'header name must be string';\n  if (typeof value !== 'string') throw 'header value must be string';\n  this.headers[name] = value;\n  return this;\n};\n\n/* gets Url for S3 request\n * @return {string} url to which request will be sent\n */\nS3Request.prototype.getUrl = function() {\n  if ( this.listType != '' ) {\n    return 'https://' + this.bucket + '.s3.amazonaws.com/';\n  } else {\n    return 'https://' + this.bucket + '.s3.amazonaws.com/' + this.objectName;\n  }\n};\n\n/* executes the S3 request and returns HttpResponse\n *\n * Supported options:\n *   logRequests - log requests (and responses) will be logged to Apps Script's Logger. default false.\n *   echoRequestToUrl - also send the request to this URL (useful for debugging Apps Script weirdness)\n *\n * @param {Object} options object with properties corresponding to option values; see documentation\n * @throws {Object} AwsError on failure\n * @returns {goog.UrlFetchApp.HttpResponse}\n */\nS3Request.prototype.execute = function(options) {\n  options = options || {};\n\n  //this.headers.Authorization = this.getAuthHeader_();\n\n  var params = {\n    method: this.httpMethod,\n    payload: this.content,\n    headers: this.headers,\n    muteHttpExceptions: true //get error content in the response\n  };\n\n  //only add a ContentType header if non-empty (although should be OK either way)\n  if (this.getContentType()) {\n    params.contentType = this.getContentType();\n  }\n\n  //var response = UrlFetchApp.fetch(this.getUrl(), params);\n  var response = UrlFetchApp.fetch(this.getSignedUrl({}), params);\n\n\n  //debugging stuff\n  //var request = UrlFetchApp.getRequest(this.getUrl(), params);\n  var request = UrlFetchApp.getRequest(this.getSignedUrl({}), params);\n\n\n  //Log request and response\n  this.lastExchangeLog = this.service.logExchange_(request, response);\n  if (options.logRequests) {\n    Logger.log(this.service.getLastExchangeLog());\n  }\n\n  //used in case you want to peak at the actual raw HTTP request coming out of Google's UrlFetchApp infrastructure\n  if (options.echoRequestToUrl) {\n    UrlFetchApp.fetch(options.echoRequestToUrl, params);\n  }\n\n  //check for error codes (AWS uses variants of 200s for flavors of success)\n  if (response.getResponseCode() > 299) {\n    //convert XML error response from AWS into JS object, and give it a name\n    var error = {};\n    error.name = 'AwsError';\n    try {\n      var errorXmlElements = XmlService.parse(response.getContentText()).getRootElement().getChildren();\n\n      for (i in errorXmlElements) {\n        var name = errorXmlElements[i].getName();\n        name = name.charAt(0).toLowerCase() + name.slice(1);\n        error[name] = errorXmlElements[i].getText();\n      }\n      //error.toString = function() { return 'AWS Error - ' + this.code + ': ' + this.message; };\n\n      error.toString = function() { return 'AWS Error - ' + this.code + ': ' + this.message + \"\\nRequest : \\n\" + request + \"\\nResponse : \\n\" + response; };\n\n      error.httpRequestLog = this.service.getLastExchangeLog();\n    } catch (e) {\n      //error parsing XML error response from AWS (will obscure actual error)\n\n      error.message = 'AWS returned HTTP code ' + response.getResponseCode() + ', but error content could not be parsed.';\n\n      error.toString = function () { return this.message; };\n\n      error.httpRequestLog = this.service.getLastExchangeLog();\n    }\n\n    throw error;\n  }\n\n  return response;\n};\n\n\n/* get a presigned URL for an object\n * @author David Su <david.d.su@gmail.com>\n * @param {Object} options options to be passed in (\"expires\", \"testing\")\n * @return {string} the URL\n */\nS3Request.prototype.getSignedUrl = function(options) {\n  options['expires'] = options['expires'] || SECONDS_PER_DAY; // default to one day.\n\n  if ( options['expires'] < 1 || options['expires'] > 7 * SECONDS_PER_DAY ) {\n    throw new \"'expires' option must be within 1 and 604800 seconds (7 days), inclusive\";\n  }\n\n  return this.authenticate(options, 'url');\n};\n\n/* authenticate a request using query parameters according to\n * AWS Signature Version 4\n * @author David Su <david.d.su@gmail.com>\n *\n * @param {Object} options options to be passed in (\"expires\", \"testing\")\n * @param {string} mode determine what to return: \"signature\" or \"url\"\n * @return {string} the final URL or signature\n *\n * 正規リクエストを作成する\n */\nS3Request.prototype.authenticate = function(options, mode) {\n  options = options || {};\n\n  // 1a. CanonicalRequest\n  // https://s3.amazonaws.com/examplebucket/test.txt\n  // ?X-Amz-Algorithm=AWS4-HMAC-SHA256\n  // &X-Amz-Credential=<your-access-key-id>/20130721/us-east-1/s3/aws4_request\n  // &X-Amz-Date=20130721T201207Z\n  // &X-Amz-Expires=86400\n  // &X-Amz-SignedHeaders=host\n  // &X-Amz-Signature=<signature-value>\n\n  var canonicalRequest = '';\n\n  //    i. HTTP verb\n  canonicalRequest += this.httpMethod + \"\\n\";\n\n  //    ii. Canonical URI\n  if (this.listType != '') {\n    var canonicalizedResource = '/';\n  } else {\n    var canonicalizedResource = '/' + this.objectName;\n  }\n  canonicalizedResource = canonicalizedResource.replace(/%2F/g, '/');\n  canonicalRequest += canonicalizedResource + \"\\n\";\n\n  //    iii. Canonical Query String\n\n  //          - algorithm\n  var amzAlgorithm = 'AWS4-HMAC-SHA256';\n\n  var canonicalQueryString = 'X-Amz-Algorithm=' + amzAlgorithm;\n\n  //          - credentials\n  var date = new Date();\n  if ('signatureTesting' in options && options.signatureTesting === true) {\n      date = new Date(Date.UTC('2013', '04', '24')); // testing with default\n  }\n  var dateStr = date.getUTCFullYear() + ('0' + (date.getUTCMonth()+1) ).slice(-2) + ('0' + date.getUTCDate()).slice(-2);\n\n  var region = options.region || DEFAULT_REGION;\n\n  var amzCredentialParts = [this.service.accessKeyId, dateStr, region, 's3', 'aws4_request'];\n\n  canonicalQueryString += '&X-Amz-Credential=' + amzCredentialParts.join('%2F');\n\n  //          - date\n  var timeStr = ('0' + date.getUTCHours()).slice(-2) + ('0' + date.getUTCMinutes()).slice(-2) + ('0' + date.getUTCSeconds()).slice(-2);\n  var timestamp = dateStr + 'T' + timeStr + 'Z'; // utc\n  canonicalQueryString += '&X-Amz-Date=' + timestamp;\n\n\n  //          - expires\n  var expires = 86400; // 24 hours\n  if (options.hasOwnProperty('expires')) {\n    expires = options.expires;\n  }\n  canonicalQueryString += '&X-Amz-Expires=' + expires;\n\n\n  //          - signed headers\n  var amzHeaders = ['host:' + this.bucket + '.s3.amazonaws.com']; //, \"x-amz-date:\" + timestamp];\n  var signedHeaders = ['host']; //, \"x-amz-date\"];\n\n  for (var headerName in this.headers) {\n    // only AMZ headers\n    // convert to lower case (1)\n    // multi-line headers to single line (4)\n    // one space after : (5)\n    if (headerName.match(/^x-amz/i)) {\n      var header = headerName.toLowerCase() + ':' + this.headers[headerName].trim();\n      amzHeaders.push(header);\n      signedHeaders.push(headerName.toLowerCase());\n    }\n  }\n\n  this.headers = amzHeaders.sort();\n  var canonicalHeaderStr = amzHeaders.sort().join(\"\\n\") + \"\\n\";\n\n  canonicalQueryString += '&X-Amz-SignedHeaders=' + signedHeaders.sort().join('%3B'); // <- TODO: figure out if this is the right delimiter\n\n  // NonCapital Params must be put after capital name parameters.\n  if (this.listType != '') {\n    canonicalQueryString += '&list-type=' + this.listType;\n    if (this.prefix != '') {\n      canonicalQueryString += '&prefix=' + this.prefix;\n    }\n  }\n\n  //Logger.log(canonicalQueryString);\n\n  canonicalRequest += canonicalQueryString + \"\\n\";\n\n  //    iv. Canonical Headers\n  canonicalRequest += canonicalHeaderStr + \"\\n\";\n\n  //    v. Signed Headers\n  canonicalRequest += signedHeaders.sort().join('%3B') + \"\\n\";\n\n  //    vi. Unsigned Payload\n  //canonicalRequest += CryptoJS.HmacSHA256('', signingKey, { asBytes: true }).toString(16).toLowerCase(); //\"UNSIGNED-PAYLOAD\";\n  canonicalRequest += 'UNSIGNED-PAYLOAD';\n\n  // 1b. StringToSign\n  var stringToSign = '';\n\n  // algorithm\n  stringToSign += amzAlgorithm + \"\\n\";\n\n  // date\n  stringToSign += timestamp + \"\\n\";\n\n  // scope\n  stringToSign += dateStr + '/' + region + '/s3/aws4_request' + \"\\n\";\n\n  // hexed and hashed\n  var digest = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, canonicalRequest, Utilities.Charset.UTF_8);\n  var digestStr = this.bytearrayToHex_(digest);\n\n  stringToSign += digestStr;\n\n  // 2. SigningKey\n  // NOTE: We have to use the CryptoJS.HmacSHA256 here because it's broken with Utilities.computeHmacSha256Signature\n  // TODO: figure out exactly why this is so ^\n\n  // var dateKey = this.unsignBytearray_(Utilities.computeHmacSha256Signature(dateStr, \"AWS4\" + this.service.secretAccessKey, Utilities.Charset.UTF_8));\n  // Logger.log(\"dateKey:\\n\" + this.bytearrayToHex_(dateKey));\n  // var dateRegionKey = this.unsignBytearray_(Utilities.computeHmacSha256Signature(region, dateKey, Utilities.Charset.UTF_8));\n  // var dateRegionServiceKey = this.unsignBytearray_(Utilities.computeHmacSha256Signature(\"s3\", dateRegionKey, Utilities.Charset.UTF_8));\n  // var signingKey = this.unsignBytearray_(Utilities.computeHmacSha256Signature(\"aws4_request\", dateRegionServiceKey, Utilities.Charset.UTF_8));\n  // Logger.log(\"SigningKey:\\n\" + this.bytearrayToHex_(signingKey));\n\n  var signingKey = this.getSignatureKey_(this.service.secretAccessKey, dateStr, region, 's3');\n\n\n  // 3. Signature\n  var signature = HmacSHA256(stringToSign, signingKey, { asBytes: true });\n\n  if (mode === 'signature') {\n    return signature;\n  }\n  var url = this.getUrl() + '?' + canonicalQueryString + '&X-Amz-Signature=' + signature;\n\n  url = url.replace(/ /g, \"%20\");\n\n  return url;\n};\n\n\n/* convert an array of signed bytes to hex encoding\n * @author David Su <david.d.su@gmail.com>\n *\n * @private\n * @param {Array} byteArr the array of bytes\n * @return {string} the hex-encoded string\n */\nS3Request.prototype.bytearrayToHex_ = function(byteArr) {\n  var hexStr = '';\n  for (var i=0; i<byteArr.length; i++) {\n    var b = byteArr[i];\n    if (b < 0) {\n      b += 256;\n    }\n    var bStr = b.toString(16);\n    if (bStr.length === 1) {\n      bStr = '0' + bStr;\n    }\n    hexStr += bStr;\n  }\n  return hexStr;\n};\n\n/* convert an array of signed bytes to unsigned bytes\n * @author David Su <david.d.su@gmail.com>\n *\n * @private\n * @param {Array} byteArr the array of bytes\n * @return {Array} the array of unsigned bytes\n */\nS3Request.prototype.unsignBytearray_ = function(byteArr) {\n  for (var i=0; i<byteArr.length; i++) {\n    if (byteArr[i] < 0) {\n      byteArr[i] += 256;\n    }\n  }\n  return byteArr;\n};\n\n/* calculate the key used to sign signature according to AWS Signature v4\n * from the examples at http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html\n * NOTE: make sure asBytes is set to true!\n *\n * @private\n * @param {string} key base64-encoded key\n * @param {string} dateStamp the date in format <yyyymmdd>\n * @param {string} regionName name of the region, e.g. \"us-east-1\"\n * @param {string} serviceName name of the service, e.g. \"s3\" or \"iam\"\n * @return {string} base64-encoded signing key\n */\nS3Request.prototype.getSignatureKey_ = function(key, dateStamp, regionName, serviceName) {\n   var kDate    = HmacSHA256(dateStamp, 'AWS4' + key, { asBytes: true });\n   var kRegion  = HmacSHA256(regionName, kDate, { asBytes: true });\n   var kService = HmacSHA256(serviceName, kRegion, { asBytes: true });\n   var kSigning = HmacSHA256('aws4_request', kService, { asBytes: true });\n\n   return kSigning;\n};\n\n/* computes Authorization Header value for S3 request\n * reference http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\n *\n * @private\n * @return {string} base64 encoded HMAC-SHA1 signature of request (see AWS Rest auth docs for details)\n */\nS3Request.prototype.getAuthHeader_ = function () {\n\n  var signature = this.authenticate({}, 'signature');\n\n  return 'AWS ' + this.service.accessKeyId + ':' + signature;\n};\n\n/* calculates Md5 for the content (http request body) of the S3 request\n *   (Content-MD5 on S3 is recommended, not required; so can change this to return \"\" if it's causing problems - likely due to charset mismatches)\n *\n * @private\n * @return {string} base64 encoded MD5 hash of content\n */\nS3Request.prototype.getContentMd5_ = function() {\n  if (this.content.length > 0) {\n    return Utilities.base64Encode(Utilities.computeDigest(Utilities.DigestAlgorithm.MD5, this.content, Utilities.Charset.UTF_8));\n  } else {\n    return '';\n  }\n};\n\nS3Request.prototype.fixedEncodeURIComponent = function(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16);\n  });\n}","import {S3Request} from \"./S3Request\"\n\n/*\n * very basic AWS S3 Client library for Google Apps Script\n * @author Erik Schultink <erik@engetc.com>\n * includes create/delete buckets, create/read/delete objects. very limited support for any optional params.\n *\n * @see http://engetc.com/projects/amazon-s3-api-binding-for-google-apps-script/\n */\n\n/**\n * @license Copyright 2014-15 Eng Etc LLC - All Rights Reserved\n *\n * LICENSE (Modified BSD) - Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *   1) Redistributions of source code must retain the above copyright notice, this list of conditions and\n *      the following disclaimer.\n *   2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions\n *      and the following disclaimer in the documentation and/or other materials provided with the\n *      distribution.\n *   3) Neither the name of the Eng Etc LLC, S3-for-Google-Apps-Script, nor the names of its contributors may be used to endorse or\n *      promote products derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ENG ETC LLC BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\n//Body of the library\n\n\n/* constructs an S3 service\n *\n * @constructor\n * @param {string} accessKeyId your AWS AccessKeyId\n * @param {string} secretAccessKey your AWS SecretAccessKey\n * @param {Object} options key-value object of options, unused\n *\n * @return {S3}\n */\nexport function getInstance(accessKeyId, secretAccessKey, options) {\n  return new S3(accessKeyId, secretAccessKey, options);\n}\n\n/* constructs an S3 service\n *\n * @constructor\n * @param {string} accessKeyId your AWS AccessKeyId\n * @param {string} secretAccessKey your AWS SecretAccessKey\n * @param {Object} options key-value object of options, unused\n */\nexport function S3(accessKeyId, secretAccessKey, options) {\n  if (typeof accessKeyId !== 'string') throw 'Must pass accessKeyId to S3 constructor';\n  if (typeof secretAccessKey !== 'string') throw 'Must pass secretAcessKey to S3 constructor';\n\n  this.accessKeyId = accessKeyId;\n  this.secretAccessKey = secretAccessKey;\n  this.options = options | {};\n}\n\n/* creates bucket in S3\n *\n * @param {string} bucket name of bucket\n * @param {Object} options optional parameters to create request; supports x-amz-acl\n * @throws {Object} AwsError on failure\n * @return void\n */\nS3.prototype.createBucket = function (bucket, options) {\n  options = options || {};\n\n  var request = new S3Request(this);\n  request.setHttpMethod('PUT');\n\n  //this is dumb and is optional from AWS perspective\n  //but UrlFetchApp will default a Content-Type header to application/xml-www-form-url-encoded or whatever, which\n  //screws up the signature of the request\n  request.setContentType('text/plain');\n\n  //support setting of ACL\n  if (typeof options['x-amz-acl'] === 'undefined') {\n    options['x-amz-acl'] = 'private';\n  }\n  request.addHeader('x-amz-acl', options['x-amz-acl']);\n\n  request.setBucket(bucket);\n\n  request.execute(options);\n\n};\n\n/* deletes bucket from S3\n *\n * @param {string} bucket name of bucket\n * @param {Object} options optional parameters to delete request\n * @throws {Object} AwsError on failure\n * @return void\n */\nS3.prototype.deleteBucket = function (bucket, options) {\n  options = options || {};\n\n  var request = new S3Request(this);\n  request.setHttpMethod('DELETE');\n\n  request.setBucket(bucket);\n  request.execute(options);\n};\n\n/**\n * list-type ex: ?/list-type=2 this is meaning command to take list of objects in bucket.\n * prefix ex:  ?prefix=/root/hoge this is filtering object by prefix, it's same as path in file system\n */\nS3.prototype.getObjectNames = function (bucket, prefix, options) {\n  options = options || {};\n\n  var request = new S3Request(this);\n  request.setHttpMethod('GET');\n  request.setBucket(bucket);\n  request.setListType('2');\n  request.setPrefix(prefix);\n\n  try {\n    var responseBlob = request.execute(options).getBlob();\n  } catch (e) {\n    if (e.name === 'AwsError' && e.code === 'NoSuchKey') {\n      return null;\n    } else {\n      //some other type of error, rethrow\n      throw e;\n    }\n  }\n\n  if (responseBlob.getContentType() === 'application/xml') {\n    var rootElements = XmlService.parse(responseBlob.getDataAsString()).getRootElement().getChildren();\n    var objectNames = [];\n\n    rootElements.forEach(function(rootElement){\n      if (rootElement.getName() === 'Contents') {\n        rootElement.getChildren().forEach(function(content){\n          if (content.getName() === 'Key') {\n            objectNames.push(content.getValue());\n          }\n        });\n      }\n    });\n\n    return objectNames;\n  }\n  return responseBlob;\n}\n\n/* puts an object into S3 bucket\n *\n * @param {string} bucket\n * @param {string} objectName name to uniquely identify object within bucket\n * @param {string} object byte sequence that is object's content\n * @param {Object} options optional parameters\n * @throws {Object} AwsError on failure\n * @return void\n */\nS3.prototype.putObject = function (bucket, objectName, object, options) {\n  options = options || {};\n\n  var request = new S3Request(this);\n  request.setHttpMethod('PUT');\n  request.setBucket(bucket);\n  request.setObjectName(objectName);\n\n  var failedBlobDuckTest = !(\n    typeof object.copyBlob        === 'function' &&\n    typeof object.getDataAsString === 'function' &&\n    typeof object.getContentType  === 'function'\n  );\n\n  //wrap object in a Blob if it doesn't appear to be one\n  if (failedBlobDuckTest) {\n    object = Utilities.newBlob(JSON.stringify(object), 'application/json');\n    object.setName(objectName);\n  }\n\n  request.setContent(object.getDataAsString());\n  request.setContentType(object.getContentType());\n\n  request.execute(options);\n};\n\n/* gets object from S3 bucket\n *\n * @param {string} bucket name of bucket\n * @param {string} objectName name that uniquely identifies object within bucket\n * @param {Object} options optional parameters for get request (unused)\n * @throws {Object} AwsError on failure\n * @return {Blob|Object} data value, converted from JSON or as a Blob if it was something else; null if it doesn't exist\n */\nS3.prototype.getObject = function (bucket, objectName, options) {\n  options = options || {};\n\n  var request = new S3Request(this);\n  request.setHttpMethod('GET');\n\n  request.setBucket(bucket);\n  request.setObjectName(objectName);\n  try {\n    var responseBlob = request.execute(options).getBlob();\n  } catch (e) {\n    if (e.name === 'AwsError' && e.code === 'NoSuchKey') {\n      return null;\n    } else {\n      //some other type of error, rethrow\n      throw e;\n    }\n  }\n\n  //not sure this is better to put here, rather than in S3Request class\n  if (responseBlob.getContentType() === 'application/json') {\n     return JSON.parse(responseBlob.getDataAsString());\n  }\n  return responseBlob;\n};\n\n/* deletes object from S3 bucket\n *\n * @param {string} bucket bucket name\n * @param {string} objectName name that uniquely identifies object within bucket\n * @param {Object} options optional parameters to delete request, unused\n * @throws {Object} AwsError on failure\n * @return void\n */\nS3.prototype.deleteObject = function (bucket, objectName, options) {\n  options = options || {};\n\n  var request = new S3Request(this);\n  request.setHttpMethod('DELETE');\n\n  request.setBucket(bucket);\n  request.setObjectName(objectName);\n\n  request.execute(options);\n};\n\n/* get a presigned URL for an object\n * @author David Su <david.d.su@gmail.com>\n *\n * @param {string} bucket bucket name\n * @param {string} objectName name that uniquely identifies object within bucket\n * @param {Object} options optional parameters (\"expires\", \"testing\")\n * @return {string} the URL\n */\nS3.prototype.getSignedUrl = function(bucket, objectName, options) {\n  options = options || {};\n\n  var request = new S3Request(this);\n  request.setHttpMethod('GET');\n\n  request.setBucket(bucket);\n  request.setObjectName(objectName);\n\n  // return request.authenticate(options);\n  return request.getSignedUrl(options);\n};\n\n//for debugging\nS3.prototype.getLastExchangeLog = function() {\n  return this.lastExchangeLog;\n};\n\n/*\n * helper to format log entry about HTTP request/response\n *\n * @param {Object} request object, from UrlFetchApp.getRequest()\n * @param {goog.HTTPResponse} response object, from UrlFetchApp\n */\nS3.prototype.logExchange_ = function(request, response) {\n  var logContent = '';\n  logContent += \"\\n-- REQUEST --\\n\";\n  for (i in request) {\n    if (typeof request[i] === 'string' && request[i].length > 1000) {\n      //truncate to avoid making log unreadable\n      request[i] = request[i].slice(0, 1000) + ' ... [TRUNCATED]';\n    }\n    logContent += Utilities.formatString(\"\\t%s: %s\\n\", i, request[i]);\n  }\n\n  logContent += \"-- RESPONSE --\\n\";\n  logContent += 'HTTP Status Code: ' + response.getResponseCode() + \"\\n\";\n  logContent += \"Headers:\\n\";\n\n  var headers = response.getHeaders();\n  for (i in headers) {\n    logContent += Utilities.formatString(\"\\t%s: %s\\n\", i, headers[i]);\n  }\n  logContent += \"Body:\\n\" + response.getContentText();\n  this.lastExchangeLog = logContent;\n};","export { getInstance } from \"./S3\"\n"]}